<script type="text/javascript" src="/Scripts/fancybox/jquery.fancybox.js"></script>
<script type="text/javascript" src="/Scripts/Media/fileuploader.js"></script>
<script type="text/javascript" src="/Scripts/Media/jquery.hotkeys.js"></script>
<script type="text/javascript" src="/Scripts/Media/jquery.jstree.js"></script>

<script type="text/javascript">
    var folders = [@Html.Raw(ViewBag.Folders)];
    var emptyText = "Folder is empty";
    var fileBrowser = "#file-browser";
    var oldSelectedNode;

    function showPreviewBox(isShowed) {
        if (isShowed) {
            $(".file-preview").show();
            $('#file-list').hide();
        } else {
            $(".file-preview").hide();
            $('#file-list').show();
        }
    }

    function getSelectedNode() {
        return $(fileBrowser).jstree('get_selected');
    }

    function openImage(id) {
        //alert("openImage");
        $(fileBrowser).jstree("select_node", $(document.getElementById(id)), true);
        var selectedNode = getSelectedNode();
        var rel = $(selectedNode).attr("rel");
        var postData = { path: id };
        switch (rel) {
            case 'image':
                $("#filepickerpreview").attr("src", id + "?" + new Date().getTime());
                break;
            case 'file':
                $("#filepickerpreview").attr("src", "/Content/Media/file.png");
                break;
                //Folder select
        }
        $(".file-preview").show();
        $('#file-list').html("");
        $.ajax({
            type: 'POST',
            url: '/Admin/Media/GetFileInfo',
            data: postData,
            success: function (response) {
                var items = [];
                items.push("<li><span class='title'> File Name</span><span>" + response.FileName + "</span></li>");
                items.push("<li><span class='title'> File Size</span><span>" + response.FileSize + "</span></li>");
                items.push("<li><span class='title'> Created</span><span>" + response.Created + "</span></li>");
                items.push("<li><span class='title'> Last Modified</span><span>" + response.LastUpdated + "</span></li>");
                $("#file-info").html(items.join(''));
            }
        });
        showPreviewBox(true);
    }

    function openNode(id) {
        //alert("function open node");
        var nodeToOpen = $(document.getElementById(id));
        $(fileBrowser).jstree("select_node", nodeToOpen, true);
        //After node has loaded, if folder is empty, node will never can trigger open node again
        //Handle trigger open node here to show thumbnails
        if (nodeToOpen.hasClass('jstree-leaf')) {
            $("#file-list").html(emptyText);
            //alert("function open node 1");
        }
            //Work normal
        else {
            //alert("function open node 2");
            if (nodeToOpen.hasClass("jstree-open")) {
                $(fileBrowser).jstree("close_node", nodeToOpen);
            }
            $(fileBrowser).jstree("open_node", nodeToOpen);
        }
    }

    function openFolder(data) {
        //alert("openFolder");
        var items = [];
        $('>ul>li', data.rslt.obj).each(function (idx, listItem) {
            var child = $(listItem);
            var rel = $(child).attr("rel");
            var id = $(child).attr("id");
            var name = id.substring(id.lastIndexOf("/") + 1, id.length);
            switch (rel) {
                case 'image':
                    items.push("<li onclick=\"openImage('" + id + "')\"><img src='" + id + "' /><span class='label label-info'>" + name + "</span></li>");
                    break;
                case 'file':
                    items.push("<li onclick=\"openImage('" + id + "')\"><img src='/Content/Media/file.png'/><span class='label label-info'>" + name + "</span></li>");
                    break;
                case 'folder':
                    items.push("<li onclick=\"openNode('" + id + "')\"><img src='/Content/Media/folder.png' /><span class='label label-info'>" + name + "</span></li>");
                    break;
                default:
            }
        });
        if (items.length > 0) {
            $('#file-list').html(items.join(''));
        } else {
            $('#file-list').html(emptyText);
        }
        showPreviewBox(false);
    }

    $(function () {
        $(fileBrowser)
            .jstree({
                // List of active plugins
                "plugins": [
                    "themes", "json_data", "ui", "crrm", "dnd", "search", "types", "hotkeys", "contextmenu"
                ],
                "themes": {
                    "theme": "default",
                    "dots": true,
                    "icons": true,
                    "url": "/Content/Media/themes/default/style.css"
                },
                "ui": {
                    "select_limit": 1,
                },
                // I usually configure the plugin that handles the data first
                // This example uses JSON as it is most common
                "json_data": {
                    // This tree is ajax enabled - as this is most common, and maybe a bit more complex
                    // All the options are almost the same as jQuery's AJAX (read the docs)
                    "ajax": {
                        "url": "@Url.Action("GetTreeData")",
                        "type": "POST",
                        "dataType": "json",
                        "data": function (n) {
                            // the result is fed to the AJAX request `data` option
                            return {
                                "dir": n.attr ? n.attr("id") : ""
                            };
                        },
                        "success": function (data) {
                            //Check if folder is empty, remove thumbnails if existed
                            if (data.length == 0) {
                                $('#file-list').html(emptyText);
                            }
                        }
                    }
                },
                // Configuring the search plugin
                "search": {
                    // As this has been a common question - async search
                    // Same as above - the `ajax` config option is actually jQuery's AJAX object
                    "ajax": {
                        "url": "./server.php",
                        // You get the search string as a parameter
                        "data": function (str) {
                            return {
                                "operation": "search",
                                "search_str": str
                            };
                        }
                    }
                },
                // Using types - most of the time this is an overkill
                // read the docs carefully to decide whether you need types
                "types": {
                    // I set both options to -2, as I do not need depth and children count checking
                    // Those two checks may slow jstree a lot, so use only when needed
                    "max_depth": -2,
                    "max_children": -2,
                    // I want only `home` nodes to be root nodes 
                    // This will prevent moving or creating any other type as a root node
                    "valid_children": ["home"],
                    "types": {
                        // The default type
                        "default": {
                            "icon": {
                                "image": "/Content/Media/themes/default/file.png"
                            }
                        },
                        "file": {
                            "icon": {
                                "image": "/Content/Media/themes/default/file.png"
                            }
                        },
                        // The `folder` type
                        "folder": {
                            // can have files and other folders inside of it, but NOT `home` nodes
                            "valid_children": ["file", "folder", "image", ".dll"],
                            "icon": {
                                "image": "/Content/Media/themes/default/folder.png"
                            }
                        },
                        // The `home` nodes 
                        "home": {
                            // can have files and folders inside, but NOT other `home` nodes    
                            "valid_children": ["default", "folder"],
                            "icon": {
                                "image": "/Content/Media/themes/default/home.png"
                            },
                            // those prevent the functions with the same name to be used on `home` nodes
                            // internally the `before` event is used
                            "start_drag": false,
                            "move_node": false,
                            "delete_node": false,
                            "remove": false
                        },
                        ".dll": {
                            "icon": {
                                "image": "/Content/Media/themes/default/dll.png"
                            }
                        },
                        "image": {
                            "icon": {
                                "image": "/Content/Media/themes/default/image.png"
                            }
                        },
                    }
                }
            })
            .bind('loaded.jstree', function (e, data) {
                // invoked after jstree has loaded
                // select item in parent textbox
                if (folders.length != 0) {
                    $(fileBrowser).jstree("deselect_all");
                    var lastItem = folders[folders.length - 1];
                    var deffereds = $.Deferred(function (def) { def.resolve(); });

                    for (var j = 0; j < folders.length - 1; j++) {
                        deffereds = (function (name, deferreds) {
                            return deferreds.pipe(function () {
                                return $.Deferred(function (def) {
                                    $(fileBrowser).jstree("open_node", $(document.getElementById(name)), function () {
                                        def.resolve();
                                        var selectItem = $(document.getElementById(lastItem));
                                        if (selectItem.length > 0) {
                                            openImage($(selectItem).attr("id"));
                                        }
                                    });
                                });
                            });
                        })(folders[j], deffereds);
                    }
                }
                else {
                    openNode("/Media");
                }
            })
            .bind("open_node.jstree", function (event, data) {
                //alert("open_node");
                $(fileBrowser).jstree("select_node", data.rslt.obj, true);
                var selectedNode = getSelectedNode();
                var rel = $(selectedNode).attr("rel");
                var id = selectedNode.attr('id');
                if (rel == 'folder' || rel == 'home') {
                }
                else {
                    openImage(id);
                }
                openFolder(data);
            })
            .bind("close_node.jstree", function (event, data) {
                //alert("close_node");
                $(fileBrowser).jstree("select_node", data.rslt.obj, true);
                var selectedNode = getSelectedNode();
                var rel = $(selectedNode).attr("rel");
                var id = selectedNode.attr('id');
                if (rel == 'folder' || rel == 'home') {
                    openFolder(data);
                }
                else {
                    openImage(id);
                }
            })
            .bind("click.jstree", function (e, data) {
            })
            .bind("create.jstree", function (e, data) {
                $.post(
                    "@Url.Action("CreateFolder")",
                    {
                        "path": data.rslt.parent.attr("id"),
                        "folder": data.rslt.name
                    },
                    function (response) {
                        if (response.Success) {
                            $(data.rslt.obj).attr("id", response.Data);
                            $(data.rslt.obj).attr("rel", "folder");
                            ShowSuccessMessage(response.Message);
                        } else {
                            ShowErrorMessage(response.Message);
                            $.jstree.rollback(data.rlbk);
                        }
                    }
                );
            })
            .bind("remove.jstree", function (e, data) {
                data.rslt.obj.each(function () {
                    $.ajax({
                        async: false,
                        type: 'POST',
                        url: "@Url.Action("Delete")",
                        data: {
                            "path": this.id
                        },
                        success: function (response) {
                            if (!response.Success) {
                                data.inst.refresh();
                                ShowErrorMessage(response.Message);
                            } else {
                                ShowSuccessMessage(response.Message);
                            }
                        }
                    });
                });
            })
            .bind("rename.jstree", function (e, data) {
                $.post(
                    "@Url.Action("Rename")",
                    {
                        "path": data.rslt.obj.attr("id"),
                        "name": data.rslt.new_name
                    },
                    function (response) {
                        if (!response.Success) {
                            $.jstree.rollback(data.rlbk);
                            ShowErrorMessage(response.message);
                        } else {
                            ShowSuccessMessage(response.message);
                            var currentNode = data.args[0];
                            currentNode.attr("id", response.path);
                            if (response.isFolder) {
                                data.inst.refresh(data.rslt.obj);
                            }
                        }
                    }
                );
            })
            .bind("move_node.jstree", function (e, data) {
                data.rslt.o.each(function (i) {
                    $.ajax({
                        async: false,
                        type: 'POST',
                        url: "@Url.Action("MoveData")",
                        data: {
                            "path": $(this).attr("id"),
                            "destination": data.rslt.np.attr("id"),
                            "copy": data.rslt.cy ? true : false
                        },
                        success: function (response) {
                            if (!response.Success) {
                                ShowErrorMessage(response.Message);
                                $.jstree.rollback(data.rlbk);
                            } else {
                                ShowSuccessMessage(response.Message);
                                data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                            }
                        }
                    });
                });
            })
            .bind("before.jstree", function (e, data) {
                if (data.func === "remove" && !confirm("@T("AdminModule:::Media:::DeleteItem:::Are you sure you want to delete?")")) {
                    showPreviewBox(false);
                    e.stopImmediatePropagation();
                    return false;
                }
                if (data.func === "select_node") {
                    var rel = $($(data.args[0]).parent()).attr("rel");
                    if (data.inst.is_leaf(data.args[0]) && rel == 'folder') {
                        //alert("empty folder");
                        $('#file-list').html(emptyText);
                        showPreviewBox(false);
                    }
                    oldSelectedNode = getSelectedNode();
                }
            })
            .delegate(".jstree-open>a", "click.jstree", function (event) {
                var rel = getSelectedNode().attr("rel");
                if (oldSelectedNode.attr("id") == getSelectedNode().attr("id") || (rel != 'home' && rel != 'folder')) {
                    $(fileBrowser).jstree("close_node", this);
                }
                else {
                    if ($(this).parent().hasClass("jstree-open")) {
                        $(fileBrowser).jstree("close_node", this);
                    }
                    $(fileBrowser).jstree("open_node", this);
                }
            })
            .delegate(".jstree-closed>a", "click.jstree", function (event) {
                var rel = getSelectedNode().attr("rel");
                var id = getSelectedNode().attr("id");
                if ((rel != 'home' && rel != 'folder')) {
                    openImage(id);
                }
                else {
                    $(fileBrowser).jstree("open_node", this);
                }
            });
    });
</script>
<script type="text/javascript">
    $(function () {
        createUploader();
        if (getUrlParam("CKEditor") != '') {
            $("#select-for-ckeditor").show();
            $("#select").hide();
        }
        else {
            $("#select").show();
            $("#select-for-ckeditor").hide();
        }
    });

    function EditThis() {
        $.fancybox({
            href: "@Url.Action("ImageEditor", "Media", new { area = "Admin" })?virtualPath=" + $('#file-browser').jstree('get_selected').attr('id'),
            type: 'iframe',
            width: '100%',
            afterClose: function () {
                $('#file-browser').find('.jstree-clicked').trigger("click");
                var toRefreshNode = $.jstree._reference($('#file-browser'))
                    ._get_parent($('#file-browser').jstree('get_selected'));
                $.jstree._reference($('#file-browser')).refresh(toRefreshNode);
                showPreviewBox(true);
                return true;
            },
        });
    }
    function SaveThis() {
        var fileUrl = $('#file-browser').jstree('get_selected').attr('id');
        if (typeof (parent.window["selectImage"]) != "undefined" && typeof (parent.$TargetControl) === "function") {
            parent.$TargetControl(fileUrl);
        } else {
            parent.$TargetControl.val(fileUrl);
        }
        if (parent.window["selectImage"].length > 0)
            parent.window["selectImage"](fileUrl);
        parent.$.fancybox.close();
    }

    function SelectThis() {
        var funcNum = getUrlParam('CKEditorFuncNum');
        var fileUrl = $('#file-browser').jstree('get_selected').attr('id');
        if (typeof (parent.window["selectImage"]) != "undefined" && parent.window["selectImage"].length > 0)
            parent.window["selectImage"](fileUrl);
        window.opener.CKEDITOR.tools.callFunction(funcNum, fileUrl);
        window.close();
    }

    var uploader;

    function createUploader() {
        uploader = new qq.FileUploader({
            element: document.getElementById("fileUploader"),
            action: '@Url.Action("FileUpload")',
                debug: true,
                onSubmit: function () {
                    var currentNode = $('#file-browser').jstree('get_selected');
                    var type = currentNode.attr("rel");
                    if (type == "folder" || type == "home") {
                        uploader.setParams({
                            dir: $('#file-browser').jstree('get_selected').attr('id')
                        });
                    }
                    else {
                        var parentNode = $.jstree._reference('#file-browser')._get_parent(currentNode);
                        if (parentNode.length > 0) {
                            uploader.setParams({
                                dir: parentNode.attr("id")
                            });
                        } else {
                            ShowErrorMessage("@T("AdminModule:::Media:::Upload:::Please select folder to upload.")");
                            return false;
                        }
                    }
                    return true;
                },
                onComplete: function (id, filename, response) {
                    if (response.Success) {
                        var fileBrowser = "#file-browser";
                        if (response.isImage) {
                            $("#filepickerpreview").attr("src", response.fileLocation);
                        } else {
                            $("#filepickerpreview").attr("src", "/Core/Media/Styles/file.png");
                        }
                        var currentNode = $(fileBrowser).jstree('get_selected');
                        var type = currentNode.attr("rel");
                        $.jstree._reference(fileBrowser).deselect_node(currentNode);
                        if (type == "folder" || type == "home") {
                            $.jstree._reference(fileBrowser).refresh(currentNode);
                        } else {
                            var parentNode = $.jstree._reference(fileBrowser)._get_parent(currentNode);
                            $.jstree._reference(fileBrowser).refresh(parentNode);
                        }
                        $.jstree._reference(fileBrowser).data.ui.to_select = ['#' + response.fileLocation];

                        showPreviewBox(true);
                        ShowSuccessMessage(response.Message);
                    } else {
                        ShowErrorMessage(response.message);
                    }
                    $(".qq-upload-fail").remove();
                    $(".qq-upload-success").remove();
                }
            });
            $(".qq-upload-button").addClass("btn btn-primary");
        }
</script>
